#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>

int graph[1001][1001] = { 0 };//간선끼리 연결이 되어있는지 확인하는 것
int DFSvisit[1001] = { 0 };//DFS 기준으로 visit 하였는지
int BFSvisit[1001] = { 0 };//BFS 기준으로 visit 하였는지
int queue[1001];//

void DFS(int v, int n);
void BFS(int v, int n);

int main() {
	
	int N, M, v;//정점, 간선, 탐색 시작 정점
	int i,x,y;

	scanf("%d%d%d", &N, &M, &v);

	for (i = 0; i < M; i++) {
		scanf("%d%d", &x, &y);
		graph[x][y] = 1;
		graph[y][x] = 1;
	}
	DFS(v, N);
	printf("\n");
	BFS(v, N);
}


void DFS(int v, int n) {//v는 start 정점, n은 정점의 갯수
	int i;
	
	DFSvisit[v] = 1;
	printf("%d ", v);

	for (i = 0; i <= n; i++) {
		if ((graph[v][i] == 1) && (DFSvisit[i] == 0)) {
			DFS(i, n);
		}
	}
	return;
}

void BFS(int v, int n) {
	int i,front=0,rear=0,pop;

	BFSvisit[v] = 1;
	printf("%d ", v);

	queue[0] = v;//queue에다가 v 저장해 준다.
	rear++;
	BFSvisit[0] = 1;

	while (front < rear) {//queue에서 하나씩 빼줘서 
		pop = queue[front];//현재 front에서 하나 빼준 후
		front++;//front는 올려준다.

		for (i = 1; i <= n; i++) {//for문에서 pop에 해당가는 것들 하나씩 search
			if ((graph[pop][i] == 1) && (BFSvisit[i] == 0)) {
				printf("%d ", i);
				queue[rear] = i;
				rear++;
				BFSvisit[i] = 1;
			}
		}
	}
}
